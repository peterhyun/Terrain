#version 330 core
out vec4 FragColor;

struct Material{

	//aka terrainTexture;
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct Light {
	// Direction has to be in world coordinates.
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform Light light;
uniform Material material;
uniform vec3 viewPos;

in vec3 FragPos; 	//world Coordinate!
in vec2 TexX;
in vec2 TexY;
in vec2 TexZ;

in vec3 wNormal;

in vec3 blend_weights;

void main()
{
	vec4 ColorNoLighting = texture(material.diffuse, TexX)*blend_weights.x + texture(material.diffuse, TexY)*blend_weights.y + texture(material.diffuse, TexZ)*blend_weights.z;
	
	vec3 ambient = light.ambient * ColorNoLighting.xyz;	
	
	vec3 norm = normalize(wNormal);
	vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * ColorNoLighting.xyz;

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * spec * ColorNoLighting.xyz;

	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1.0);
}